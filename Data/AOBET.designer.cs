#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AOBET.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aobet")]
	public partial class AOBETDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFormasi(Formasi instance);
    partial void UpdateFormasi(Formasi instance);
    partial void DeleteFormasi(Formasi instance);
    partial void InsertRecord(Record instance);
    partial void UpdateRecord(Record instance);
    partial void DeleteRecord(Record instance);
    partial void InsertHero(Hero instance);
    partial void UpdateHero(Hero instance);
    partial void DeleteHero(Hero instance);
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertParty(Party instance);
    partial void UpdateParty(Party instance);
    partial void DeleteParty(Party instance);
    #endregion
		
		public AOBETDataContext() : 
				base(global::AOBET.Properties.Settings.Default.aobetConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AOBETDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AOBETDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AOBETDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AOBETDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Formasi> Formasis
		{
			get
			{
				return this.GetTable<Formasi>();
			}
		}
		
		public System.Data.Linq.Table<Record> Records
		{
			get
			{
				return this.GetTable<Record>();
			}
		}
		
		public System.Data.Linq.Table<Hero> Heros
		{
			get
			{
				return this.GetTable<Hero>();
			}
		}
		
		public System.Data.Linq.Table<Match> Matches
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<Party> Parties
		{
			get
			{
				return this.GetTable<Party>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Formasi")]
	public partial class Formasi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FormasiId;
		
		private string _FormasiName;
		
		private string _FormasiCode;
		
		private string _HeroId;
		
		private System.Nullable<int> _Win;
		
		private System.Nullable<int> _Lose;
		
		private string _FormasiData;
		
		private EntitySet<Party> _Parties;
		
		private EntityRef<Hero> _Hero;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormasiIdChanging(string value);
    partial void OnFormasiIdChanged();
    partial void OnFormasiNameChanging(string value);
    partial void OnFormasiNameChanged();
    partial void OnFormasiCodeChanging(string value);
    partial void OnFormasiCodeChanged();
    partial void OnHeroIdChanging(string value);
    partial void OnHeroIdChanged();
    partial void OnWinChanging(System.Nullable<int> value);
    partial void OnWinChanged();
    partial void OnLoseChanging(System.Nullable<int> value);
    partial void OnLoseChanged();
    partial void OnFormasiDataChanging(string value);
    partial void OnFormasiDataChanged();
    #endregion
		
		public Formasi()
		{
			this._Parties = new EntitySet<Party>(new Action<Party>(this.attach_Parties), new Action<Party>(this.detach_Parties));
			this._Hero = default(EntityRef<Hero>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormasiId", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FormasiId
		{
			get
			{
				return this._FormasiId;
			}
			set
			{
				if ((this._FormasiId != value))
				{
					this.OnFormasiIdChanging(value);
					this.SendPropertyChanging();
					this._FormasiId = value;
					this.SendPropertyChanged("FormasiId");
					this.OnFormasiIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormasiName", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string FormasiName
		{
			get
			{
				return this._FormasiName;
			}
			set
			{
				if ((this._FormasiName != value))
				{
					this.OnFormasiNameChanging(value);
					this.SendPropertyChanging();
					this._FormasiName = value;
					this.SendPropertyChanged("FormasiName");
					this.OnFormasiNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormasiCode", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string FormasiCode
		{
			get
			{
				return this._FormasiCode;
			}
			set
			{
				if ((this._FormasiCode != value))
				{
					this.OnFormasiCodeChanging(value);
					this.SendPropertyChanging();
					this._FormasiCode = value;
					this.SendPropertyChanged("FormasiCode");
					this.OnFormasiCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeroId", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string HeroId
		{
			get
			{
				return this._HeroId;
			}
			set
			{
				if ((this._HeroId != value))
				{
					if (this._Hero.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeroIdChanging(value);
					this.SendPropertyChanging();
					this._HeroId = value;
					this.SendPropertyChanged("HeroId");
					this.OnHeroIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Win", DbType="Int")]
		public System.Nullable<int> Win
		{
			get
			{
				return this._Win;
			}
			set
			{
				if ((this._Win != value))
				{
					this.OnWinChanging(value);
					this.SendPropertyChanging();
					this._Win = value;
					this.SendPropertyChanged("Win");
					this.OnWinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lose", DbType="Int")]
		public System.Nullable<int> Lose
		{
			get
			{
				return this._Lose;
			}
			set
			{
				if ((this._Lose != value))
				{
					this.OnLoseChanging(value);
					this.SendPropertyChanging();
					this._Lose = value;
					this.SendPropertyChanged("Lose");
					this.OnLoseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormasiData", DbType="VarChar(200)")]
		public string FormasiData
		{
			get
			{
				return this._FormasiData;
			}
			set
			{
				if ((this._FormasiData != value))
				{
					this.OnFormasiDataChanging(value);
					this.SendPropertyChanging();
					this._FormasiData = value;
					this.SendPropertyChanged("FormasiData");
					this.OnFormasiDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Formasi_Party", Storage="_Parties", ThisKey="FormasiId", OtherKey="FormasiId")]
		public EntitySet<Party> Parties
		{
			get
			{
				return this._Parties;
			}
			set
			{
				this._Parties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hero_Formasi", Storage="_Hero", ThisKey="HeroId", OtherKey="HeroId", IsForeignKey=true)]
		public Hero Hero
		{
			get
			{
				return this._Hero.Entity;
			}
			set
			{
				Hero previousValue = this._Hero.Entity;
				if (((previousValue != value) 
							|| (this._Hero.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hero.Entity = null;
						previousValue.Formasis.Remove(this);
					}
					this._Hero.Entity = value;
					if ((value != null))
					{
						value.Formasis.Add(this);
						this._HeroId = value.HeroId;
					}
					else
					{
						this._HeroId = default(string);
					}
					this.SendPropertyChanged("Hero");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Parties(Party entity)
		{
			this.SendPropertyChanging();
			entity.Formasi = this;
		}
		
		private void detach_Parties(Party entity)
		{
			this.SendPropertyChanging();
			entity.Formasi = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Record")]
	public partial class Record : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordId;
		
		private string _MatchId;
		
		private string _WPId;
		
		private string _LPId;
		
		private System.DateTime _RecordTime;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Party> _Party;
		
		private EntityRef<Party> _Party1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    partial void OnMatchIdChanging(string value);
    partial void OnMatchIdChanged();
    partial void OnWPIdChanging(string value);
    partial void OnWPIdChanged();
    partial void OnLPIdChanging(string value);
    partial void OnLPIdChanged();
    partial void OnRecordTimeChanging(System.DateTime value);
    partial void OnRecordTimeChanged();
    #endregion
		
		public Record()
		{
			this._Match = default(EntityRef<Match>);
			this._Party = default(EntityRef<Party>);
			this._Party1 = default(EntityRef<Party>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="VarChar(5)")]
		public string MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WPId", DbType="VarChar(5)")]
		public string WPId
		{
			get
			{
				return this._WPId;
			}
			set
			{
				if ((this._WPId != value))
				{
					if (this._Party1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWPIdChanging(value);
					this.SendPropertyChanging();
					this._WPId = value;
					this.SendPropertyChanged("WPId");
					this.OnWPIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LPId", DbType="VarChar(5)")]
		public string LPId
		{
			get
			{
				return this._LPId;
			}
			set
			{
				if ((this._LPId != value))
				{
					if (this._Party.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLPIdChanging(value);
					this.SendPropertyChanging();
					this._LPId = value;
					this.SendPropertyChanged("LPId");
					this.OnLPIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordTime", DbType="DateTime NOT NULL")]
		public System.DateTime RecordTime
		{
			get
			{
				return this._RecordTime;
			}
			set
			{
				if ((this._RecordTime != value))
				{
					this.OnRecordTimeChanging(value);
					this.SendPropertyChanging();
					this._RecordTime = value;
					this.SendPropertyChanged("RecordTime");
					this.OnRecordTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Record", Storage="_Match", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(string);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Party_Record", Storage="_Party", ThisKey="LPId", OtherKey="PartyId", IsForeignKey=true)]
		public Party Party
		{
			get
			{
				return this._Party.Entity;
			}
			set
			{
				Party previousValue = this._Party.Entity;
				if (((previousValue != value) 
							|| (this._Party.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Party.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._LPId = value.PartyId;
					}
					else
					{
						this._LPId = default(string);
					}
					this.SendPropertyChanged("Party");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Party_Record1", Storage="_Party1", ThisKey="WPId", OtherKey="PartyId", IsForeignKey=true)]
		public Party Party1
		{
			get
			{
				return this._Party1.Entity;
			}
			set
			{
				Party previousValue = this._Party1.Entity;
				if (((previousValue != value) 
							|| (this._Party1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Party1.Entity = null;
						previousValue.Records1.Remove(this);
					}
					this._Party1.Entity = value;
					if ((value != null))
					{
						value.Records1.Add(this);
						this._WPId = value.PartyId;
					}
					else
					{
						this._WPId = default(string);
					}
					this.SendPropertyChanged("Party1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hero")]
	public partial class Hero : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HeroId;
		
		private string _HeroName;
		
		private System.Nullable<int> _Win;
		
		private System.Nullable<int> _Lose;
		
		private EntitySet<Formasi> _Formasis;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHeroIdChanging(string value);
    partial void OnHeroIdChanged();
    partial void OnHeroNameChanging(string value);
    partial void OnHeroNameChanged();
    partial void OnWinChanging(System.Nullable<int> value);
    partial void OnWinChanged();
    partial void OnLoseChanging(System.Nullable<int> value);
    partial void OnLoseChanged();
    #endregion
		
		public Hero()
		{
			this._Formasis = new EntitySet<Formasi>(new Action<Formasi>(this.attach_Formasis), new Action<Formasi>(this.detach_Formasis));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeroId", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HeroId
		{
			get
			{
				return this._HeroId;
			}
			set
			{
				if ((this._HeroId != value))
				{
					this.OnHeroIdChanging(value);
					this.SendPropertyChanging();
					this._HeroId = value;
					this.SendPropertyChanged("HeroId");
					this.OnHeroIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeroName", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string HeroName
		{
			get
			{
				return this._HeroName;
			}
			set
			{
				if ((this._HeroName != value))
				{
					this.OnHeroNameChanging(value);
					this.SendPropertyChanging();
					this._HeroName = value;
					this.SendPropertyChanged("HeroName");
					this.OnHeroNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Win", DbType="Int")]
		public System.Nullable<int> Win
		{
			get
			{
				return this._Win;
			}
			set
			{
				if ((this._Win != value))
				{
					this.OnWinChanging(value);
					this.SendPropertyChanging();
					this._Win = value;
					this.SendPropertyChanged("Win");
					this.OnWinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lose", DbType="Int")]
		public System.Nullable<int> Lose
		{
			get
			{
				return this._Lose;
			}
			set
			{
				if ((this._Lose != value))
				{
					this.OnLoseChanging(value);
					this.SendPropertyChanging();
					this._Lose = value;
					this.SendPropertyChanged("Lose");
					this.OnLoseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hero_Formasi", Storage="_Formasis", ThisKey="HeroId", OtherKey="HeroId")]
		public EntitySet<Formasi> Formasis
		{
			get
			{
				return this._Formasis;
			}
			set
			{
				this._Formasis.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Formasis(Formasi entity)
		{
			this.SendPropertyChanging();
			entity.Hero = this;
		}
		
		private void detach_Formasis(Formasi entity)
		{
			this.SendPropertyChanging();
			entity.Hero = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Match")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MatchId;
		
		private string _MatchName;
		
		private EntitySet<Record> _Records;
		
		private EntitySet<Party> _Parties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(string value);
    partial void OnMatchIdChanged();
    partial void OnMatchNameChanging(string value);
    partial void OnMatchNameChanged();
    #endregion
		
		public Match()
		{
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			this._Parties = new EntitySet<Party>(new Action<Party>(this.attach_Parties), new Action<Party>(this.detach_Parties));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchName", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string MatchName
		{
			get
			{
				return this._MatchName;
			}
			set
			{
				if ((this._MatchName != value))
				{
					this.OnMatchNameChanging(value);
					this.SendPropertyChanging();
					this._MatchName = value;
					this.SendPropertyChanged("MatchName");
					this.OnMatchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Record", Storage="_Records", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Party", Storage="_Parties", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<Party> Parties
		{
			get
			{
				return this._Parties;
			}
			set
			{
				this._Parties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_Parties(Party entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Parties(Party entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Party")]
	public partial class Party : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PartyId;
		
		private string _MatchId;
		
		private string _FormasiId;
		
		private System.Nullable<int> _Win;
		
		private System.Nullable<int> _Lose;
		
		private EntitySet<Record> _Records;
		
		private EntitySet<Record> _Records1;
		
		private EntityRef<Formasi> _Formasi;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartyIdChanging(string value);
    partial void OnPartyIdChanged();
    partial void OnMatchIdChanging(string value);
    partial void OnMatchIdChanged();
    partial void OnFormasiIdChanging(string value);
    partial void OnFormasiIdChanged();
    partial void OnWinChanging(System.Nullable<int> value);
    partial void OnWinChanged();
    partial void OnLoseChanging(System.Nullable<int> value);
    partial void OnLoseChanged();
    #endregion
		
		public Party()
		{
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			this._Records1 = new EntitySet<Record>(new Action<Record>(this.attach_Records1), new Action<Record>(this.detach_Records1));
			this._Formasi = default(EntityRef<Formasi>);
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartyId", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PartyId
		{
			get
			{
				return this._PartyId;
			}
			set
			{
				if ((this._PartyId != value))
				{
					this.OnPartyIdChanging(value);
					this.SendPropertyChanging();
					this._PartyId = value;
					this.SendPropertyChanged("PartyId");
					this.OnPartyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="VarChar(5)")]
		public string MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormasiId", DbType="VarChar(3)")]
		public string FormasiId
		{
			get
			{
				return this._FormasiId;
			}
			set
			{
				if ((this._FormasiId != value))
				{
					if (this._Formasi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormasiIdChanging(value);
					this.SendPropertyChanging();
					this._FormasiId = value;
					this.SendPropertyChanged("FormasiId");
					this.OnFormasiIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Win", DbType="Int")]
		public System.Nullable<int> Win
		{
			get
			{
				return this._Win;
			}
			set
			{
				if ((this._Win != value))
				{
					this.OnWinChanging(value);
					this.SendPropertyChanging();
					this._Win = value;
					this.SendPropertyChanged("Win");
					this.OnWinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lose", DbType="Int")]
		public System.Nullable<int> Lose
		{
			get
			{
				return this._Lose;
			}
			set
			{
				if ((this._Lose != value))
				{
					this.OnLoseChanging(value);
					this.SendPropertyChanging();
					this._Lose = value;
					this.SendPropertyChanged("Lose");
					this.OnLoseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Party_Record", Storage="_Records", ThisKey="PartyId", OtherKey="LPId")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Party_Record1", Storage="_Records1", ThisKey="PartyId", OtherKey="WPId")]
		public EntitySet<Record> Records1
		{
			get
			{
				return this._Records1;
			}
			set
			{
				this._Records1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Formasi_Party", Storage="_Formasi", ThisKey="FormasiId", OtherKey="FormasiId", IsForeignKey=true)]
		public Formasi Formasi
		{
			get
			{
				return this._Formasi.Entity;
			}
			set
			{
				Formasi previousValue = this._Formasi.Entity;
				if (((previousValue != value) 
							|| (this._Formasi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formasi.Entity = null;
						previousValue.Parties.Remove(this);
					}
					this._Formasi.Entity = value;
					if ((value != null))
					{
						value.Parties.Add(this);
						this._FormasiId = value.FormasiId;
					}
					else
					{
						this._FormasiId = default(string);
					}
					this.SendPropertyChanged("Formasi");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Party", Storage="_Match", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Parties.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Parties.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(string);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Party = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Party = null;
		}
		
		private void attach_Records1(Record entity)
		{
			this.SendPropertyChanging();
			entity.Party1 = this;
		}
		
		private void detach_Records1(Record entity)
		{
			this.SendPropertyChanging();
			entity.Party1 = null;
		}
	}
}
#pragma warning restore 1591
